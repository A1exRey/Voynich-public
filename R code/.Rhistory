interlinear_full_lines$line = gsub("\\{\\&I.*\\}", "I\\'", interlinear_full_lines$line) # {I''} -> I'
# Rare characters
interlinear_full_lines$line = gsub("\\*?\\{\\&138\\}", "è", interlinear_full_lines$line) # *{&138} -> è
interlinear_full_lines$line = gsub("\\*?\\{\\&140\\}", "î", interlinear_full_lines$line) # *{&140} ->î
interlinear_full_lines$line = gsub("\\*?\\{\\&144\\}", "É", interlinear_full_lines$line) # {&144} -> É
interlinear_full_lines$line = gsub("\\*?\\{\\&146\\}", "Æ", interlinear_full_lines$line) # {&146} -> Æ
interlinear_full_lines$line = gsub("\\*?\\{\\&152\\}", "ÿ", interlinear_full_lines$line) # {&152} -> ÿ
interlinear_full_lines$line = gsub("\\*?\\{\\&153\\}", "Ö", interlinear_full_lines$line) # {&153} -> Ö
interlinear_full_lines$line = gsub("\\*?\\{\\&163\\}", "ú", interlinear_full_lines$line) # {&163} -> ú
interlinear_full_lines$line = gsub("\\*?\\{\\&164\\}", "ñ", interlinear_full_lines$line) # {&164} -> ñ
interlinear_full_lines$line = gsub("\\*?\\{\\&167\\}", "º", interlinear_full_lines$line) # {&167} -> º
interlinear_full_lines$line = gsub("\\*?\\{\\&169\\}", "®", interlinear_full_lines$line) # {&169} -> ®
interlinear_full_lines$line = gsub("\\*?\\{\\&170\\}", "¬", interlinear_full_lines$line) # {&170} -> ¬
interlinear_full_lines$line = gsub("\\*?\\{\\&171\\}", "½", interlinear_full_lines$line) # {&171} -> ½
interlinear_full_lines$line = gsub("\\*?\\{\\&172\\}", "¼", interlinear_full_lines$line) # {&172} -> ¼
interlinear_full_lines$line = gsub("\\*?\\{\\&173\\}", "¡", interlinear_full_lines$line) # {&173} -> ¡
interlinear_full_lines$line = gsub("\\*?\\{\\&176\\}", "░", interlinear_full_lines$line) # {&176} -> ░
interlinear_full_lines$line = gsub("\\*?\\{\\&178\\}", "▓", interlinear_full_lines$line) # {&178} -> ▓
interlinear_full_lines$line = gsub("\\*?\\{\\&192\\}", "└", interlinear_full_lines$line) # {&192} -> └
interlinear_full_lines$line = gsub("\\*?\\{\\&195\\}", "├", interlinear_full_lines$line) # {&192} -> ├
interlinear_full_lines$line = gsub("\\*?\\{\\&252\\}", "³", interlinear_full_lines$line) # {&252} -> ³
interlinear_full_lines$line = gsub("\\*?\\{\\&253\\}", "²", interlinear_full_lines$line) # {&252} -> ²
interlinear_full_lines$line = gsub("\\{\\\\\\}", "", interlinear_full_lines$line) # {\\} -> '' (alignment)
interlinear_full_lines$line = gsub("\\*\\{\\&zh\\}", "zh", interlinear_full_lines$line) # *{&zh} -> zh
interlinear_full_lines$line = gsub("\\*\\{\\&ct\\}", "ct", interlinear_full_lines$line) # *{&ct} -> ct
interlinear_full_lines$line = gsub("\\*\\{\\&an\\}", "an", interlinear_full_lines$line) # *{&an} -> an
interlinear_full_lines$line = gsub("\\*\\{\\&ar\\}", "ar", interlinear_full_lines$line) # *{&ar} -> ar
interlinear_full_lines$line = gsub("\\{\\&c'\\}", "c'", interlinear_full_lines$line) # {&c'} -> c'
interlinear_full_lines$line = gsub("\\{\\&c'y\\}", "c'y", interlinear_full_lines$line) # {&c'y} -> c'y
interlinear_full_lines$line = gsub("\\{\\&c'a\\}", "c'a", interlinear_full_lines$line) # {&c'a} -> c'a
interlinear_full_lines$line = gsub("\\*\\{\\&ol\\}", "ol", interlinear_full_lines$line) # *{&ol} -> ol
interlinear_full_lines$line = gsub("\\*\\{\\&PP\\}", "PP", interlinear_full_lines$line) # *{&PP} -> PP
interlinear_full_lines$line = gsub("\\.\\.", '\\.', interlinear_full_lines$line)
# Delete spaces, extra breaks, change non-final dashes to periods
interlinear_full_lines$complex.line <- interlinear_full_lines$line
# IGNORE LIGATURES AND WEIRDOS
# Change the infrequent characters to *
interlinear_full_lines$line = gsub("[èîÉÆÿÖúñº®¬½¼¡░▓└├³²vzub]", '*', interlinear_full_lines$line)
# Plumes are also rare characters
interlinear_full_lines$line = gsub("[ '\"]", '*', interlinear_full_lines$line)
# Make all characters lowercase (delete ligatures)
interlinear_full_lines$line = tolower(interlinear_full_lines$line)
takahashi_lines <- interlinear_full_lines[interlinear_full_lines$transcriber == 'H',]
takahashi_lines$line <- gsub('[\\!\\% ]', '', takahashi_lines$line)
line_lengths <- c() # Length of each line of the Takahashi transcription
line_code <- c() # The numeric code of the line: '-' (line end), '-' (par end), '.' (circular text)
for (l in takahashi_lines$line) {
line_lengths <- c(line_lengths, length(unlist(strsplit(l, "[\\.,-]"))))
code <- str_extract(l, '.$') # Make the code the last character of the string, unless there's a '-' and then a '.'
if ((code == '.')&(grepl('-', l))) {
code <- '-'
}
line_code <- c(line_code, code)
#line_code <- c(line_code, str_extract(l, '([-=])|(\\.$)'))
}
# Types of lines: 'line, 'init', 'fin', 'init-fin' (single line pars), and 'circ' (circular text)
line_types <- c('init')
for (i in 2:length(takahashi_lines$line)) {
line_type <- NULL
# Circular Line Codes
if ((line_code[i] == '.')|(line_code[i] == '{blot}')) {
line_type <- 'circ'
}
# Paragraph-ending Line Codes
if (line_code[i] == '=') {
if (line_code[i-1] %in% c('.', '=')) {
line_type <- 'init-fin'
} else {
line_type <- 'fin'
}
}
# Regular Line Codes
if (line_code[i] == '-') {
if (line_code[i-1] %in% c('.', '=')) {
if (line_code[i+1] == '.') {
line_type <- 'init-fin'
} else {
line_type <- 'init'
}
} else {
if (line_code[i+1] == '.') {
line_type <- 'fin'
} else {
line_type <- 'line'
}
}
}
line_types <- c(line_types, line_type)
}
par_initial_nums <- c()
for (i in 1:length(line_types)) {
par_num <- NA
if (line_types[i] == 'circ') {
par_num <- NA
}
if (line_types[i] %in% c('init', 'init-fin')) {
par_num <- 0
}
if (line_types[i] %in% c('line', 'fin')) {
par_num <- line_lengths[i-1] + tail(par_initial_nums, 1)
}
par_initial_nums <- c(par_initial_nums, par_num)
}
# Paragraph final requires moving backwards through the list, so reverse everything
r_line_types <- rev(line_types)
r_line_lengths <- rev(line_lengths)
r_par_final_nums <- c()
for (i in 1:length(line_types)) {
par_num <- NA
if (r_line_types[i] == 'circ') {
par_num <- NA
}
if (r_line_types[i] %in% c('fin', 'init-fin')) {
par_num <- 0
}
if (r_line_types[i] %in% c('line', 'init')) {
par_num <- r_line_lengths[i-1] + tail(r_par_final_nums, 1)
}
r_par_final_nums <- c(r_par_final_nums, par_num)
}
par_final_nums <- rev(r_par_final_nums)
# Add the paragraph information into the interlinear line dataframe (but only for the Takahashi transcription)
# Fill out the cols with NAs
interlinear_full_lines$par_init <- rep(NA, length(interlinear_full_lines$line))
interlinear_full_lines$par_fin <- rep(NA, length(interlinear_full_lines$line))
# Add the info into the Takahashi lines
interlinear_full_lines$par_init[interlinear_full_lines$transcriber == 'H'] <- par_initial_nums
interlinear_full_lines$par_fin[interlinear_full_lines$transcriber == 'H'] <- par_final_nums
# Write the file
write.table(interlinear_full_lines, file = "Voynich_texts/interlinear_full_lines.txt", sep = "\t", row.names=FALSE)
word_by_word <- c()
complex.word_by_word <- c()
folio_by_word <- c()
section_by_word <- c()
quire_by_word <- c()
panel_by_word <- c()
language_by_word <- c()
hand_by_word <- c()
misc_by_word <- c()
d.hand_by_word <- c()
place_by_word <- c()
linenum_by_word <- c()
transcriber_by_word <- c()
line.init <- c() # Placement from the first word in the line
line.fin <- c() # Placement from the last word in the line
par.init <- c() # Placement from the first word in the paragraph
par.fin <- c() # # Placement from the last word in the line
print ("Lines read:")
for (i in 1:length(interlinear_full_lines$line)) {
line <- interlinear_full_lines[i,1]
complex.line <- interlinear_full_lines[i,13]
line <- gsub('[=\\!\\%]', '', line) # Remove Filler and paragraph boundary characters
line <- gsub('\\-$', '', line) # Remove dashes at the end of words (line boundary characters)
line <- gsub('-', '\\.', line) # Elsewhere they are treated as word boundaries (as between labels)
complex.line <- gsub('[=\\!\\%]', '', complex.line) # Remove Filler and paragraph boundar characters
complex.line <- gsub('\\-$', '', complex.line) # Remove dashes at the end of words (line boundary characters)
complex.line <- gsub('-', '\\.', complex.line) # Elsewhere they are treated as word boundaries (as between labels)
line_list <- unlist(strsplit(line, '[\\.,-]'))
complex.line_list <- unlist(strsplit(complex.line, '[\\.,-]'))
line_len <- length(line_list)
if (i%%1000 == 0) {
print(i)
}
if (line_len > 0) {
for (j in 1:line_len) {
word_by_word <- c(word_by_word, line_list[j])
complex.word_by_word <- c(complex.word_by_word, complex.line_list[j])
folio_by_word <- c(folio_by_word, folio_by_line[i])
section_by_word <- c(section_by_word, section_by_line[i])
quire_by_word <- c(quire_by_word, quire_by_line[i])
panel_by_word <- c(panel_by_word, panel_by_line[i])
language_by_word <- c(language_by_word, language_by_line[i])
hand_by_word <- c(hand_by_word, hand_by_line[i])
misc_by_word <- c(misc_by_word, misc_by_line[i])
d.hand_by_word <- c(d.hand_by_word, d.hand_by_line[i])
place_by_word <- c(place_by_word, place_by_line[i])
linenum_by_word <- c(linenum_by_word, linenum_by_line[i])
transcriber_by_word <- c(transcriber_by_word, transcriber_by_line[i])
# Line placement
line.init <- c(line.init, j)
line.fin <- c(line.fin, line_len - j + 1)
# Paragraph placement
if (is.na(interlinear_full_lines$par_init[i])) {
par.init <- c(par.init, NA)
} else {
par.init <- c(par.init, (as.numeric(interlinear_full_lines$par_init[i]) + j) )
}
if (is.na(interlinear_full_lines$par_fin[i])) {
par.fin <- c(par.fin, NA)
} else {
par.fin <- c(par.fin, (as.numeric(interlinear_full_lines$par_fin[i]) + line_len - j + 1) )
}
}
}
}
interlinear_full_words <- data.frame(word_by_word, complex.word_by_word, folio_by_word, section_by_word, quire_by_word, panel_by_word, language_by_word, hand_by_word, misc_by_word, d.hand_by_word, place_by_word, linenum_by_word, transcriber_by_word, line.init, line.fin, par.init, par.fin, stringsAsFactors = FALSE)
names(interlinear_full_words) <- c('word', 'complex_word', 'folio', 'section', 'quire', 'panel', 'language', 'hand', 'misc', 'd.hand', 'placement', 'line_number', 'transcriber', 'line_initial', 'line_final', 'par_initial', 'par_final')
# Write the file
write.table(interlinear_full_words, file = "Voynich_texts/interlinear_full_words.txt", sep = "\t", row.names=FALSE)
interlinear_full_words[interlinear_full_words$word != interlinear_full_words$complex_word,]
rm(list=ls())
library(ngram)
rm(list=ls())
library(ngram)
library(stringr)
# Load the Voynich Interlinear
voynich.load <- scan('Voynich_texts/text16e6.evt', what="character", sep="\n", comment.char = "#")
folio <- c()
section <- c()
quire <- c()
panel <- c()
language <- c()
hand <- c()
misc <- c()
full_page_lines <- c() ## List of list of ever line on each page
lines <- c() ## List of every line on a page
for (l in voynich.load) {
if (grepl('^<f[0-9]*[rv][0-9]*>', l, useBytes=TRUE)) {
full_page_lines <- c(full_page_lines, list(lines)) # Combine the previous page's lines
lines <- c()
folio <- c(folio, sub('^<(f[0-9]*[rv][0-9]*)>.*$', '\\1', l))
section <- c(section, sub('^.*\\$I=(.).*$', '\\1', l))
quire <- c(quire, sub('^.*\\$Q=(.).*$', '\\1', l))
panel <- c(panel, sub('^.*\\$P=(.).*$', '\\1', l))
language <- c(language, sub('^.*\\$L=(.).*$', '\\1', l))
hand <- c(hand, sub('^.*\\$H=(.).*$', '\\1', l))
misc <- c(misc, sub('^.*\\$X=(.).*$', '\\1', l))
# Change to NA if there isn't a designation
if (tail(language, 1) == l) {
language <- c(head(language, (length(language)-1)), NA)
}
if (tail(hand, 1) == l) {
hand <- c(head(hand, (length(hand)-1)), NA)
}
if (tail(misc, 1) == l) {
misc <- c(head(misc, (length(misc)-1)), NA)
}
} else {
lines <- c(lines, l) # Collect the line
}
}
# Delete the Null first line and add the final line
full_page_lines <- c(tail(full_page_lines, length(full_page_lines)-1))
full_page_lines <- c(full_page_lines, list(lines))
davis.df <- read.csv(file='Voynich_texts/Davis hands.csv', header=TRUE)
d.hand <- c()
for (f in folio) {
d.hand <- c(d.hand, as.character(davis.df[davis.df$Folio == f,]$Scribe))
}
line_by_line <- c()
folio_by_line <- c()
section_by_line <- c()
quire_by_line <- c()
panel_by_line <- c()
language_by_line <- c()
hand_by_line <- c()
misc_by_line <- c()
d.hand_by_line <- c()
place_by_line <- c()
linenum_by_line <- c()
transcriber_by_line <- c()
for (i in 1:length(full_page_lines)) {
for (j in 1:length(full_page_lines[[i]])) {
# Some pages are missing, thus some full_page_lines are null
if (!(is.null(full_page_lines[[i]][j]))) {
line <- full_page_lines[[i]][j]
line <- sub('^.*  (.*)$', '\\1', line) # Delete the part before the tab
line_by_line <- c(line_by_line, line)
folio_by_line <- c(folio_by_line, folio[i])
section_by_line <- c(section_by_line, section[i])
quire_by_line <- c(quire_by_line, quire[i])
panel_by_line <- c(panel_by_line, panel[i])
language_by_line <- c(language_by_line, language[i])
hand_by_line <- c(hand_by_line, hand[i])
misc_by_line <- c(misc_by_line, misc[i])
d.hand_by_line <- c(d.hand_by_line, d.hand[i])
line <- full_page_lines[[i]][j]
place_by_line <- c(place_by_line, sub("^<([^>]*)\\.([^>]*)\\.([^>]*);([^>]*)>.*$", "\\2", line))
linenum_by_line <- c(linenum_by_line, sub("^<([^>]*)\\.([^>]*)\\.([^>]*);([^>]*)>.*$", "\\3", line))
transcriber_by_line <- c(transcriber_by_line, sub("^<([^>]*)\\.([^>]*)\\.([^>]*);([^>]*)>.*$", "\\4", line))
}
}
}
interlinear_full_lines <- data.frame(line_by_line, folio_by_line, section_by_line, quire_by_line, panel_by_line, language_by_line, hand_by_line, misc_by_line, d.hand_by_line, place_by_line, linenum_by_line, transcriber_by_line, stringsAsFactors = FALSE)
names(interlinear_full_lines) <- c('line','folio','section','quire','panel','language','hand','misc', 'd.hand', "placement", "line_number", 'transcriber')
blork <- interlinear_full_lines$line
#### CLEAN THE LINE DATAFRAME OF NOTES, WEIRDO CHARACTERS, LIGATURES
# This extracts notes that contain Voynich text and places them within the line: {otedy-} => .otedy.
interlinear_full_lines$line <- gsub("\\{([a-z\\!\\.\\*]*)-\\}", "\\.\\1\\.", interlinear_full_lines$line)
# This extracts labelled notes: {label:otedy} => .otedy.
interlinear_full_lines$line <- gsub("\\{label:([a-z\\!\\.]*)\\}", "\\.\\1\\.", interlinear_full_lines$line)
# This extracts notes which have an opening but not closing bracket due to the usage of a #:
# '{Grove's ...' => ''
interlinear_full_lines$line <- gsub("\\{Grove.*$", "", interlinear_full_lines$line)
# All other bracket notes not of the form '{&...}' are deleted (deletes, e.g. {-l}, {bridgehead})
interlinear_full_lines$line <- gsub("\\{[^\\&].*?\\}", "", interlinear_full_lines$line)
# Ligatures are represented by uppercase characters in brackets, e.g. 't{T}' -> 'T'
interlinear_full_lines$line = gsub("\\{\\&\\.\\}", "", interlinear_full_lines$line) # {&.} -> ''
interlinear_full_lines$line = gsub("\\{\\&\\-\\}", "", interlinear_full_lines$line) # {&-} -> ''
interlinear_full_lines$line = gsub("o\\{\\&o\\'\\}", "o\\'", interlinear_full_lines$line) # o{o'} -> o'
interlinear_full_lines$line = gsub("q\\{\\&q.*\\}", "q\\'", interlinear_full_lines$line) # q{q''} -> q'
interlinear_full_lines$line = gsub("\\{\\&X\\}", "X", interlinear_full_lines$line) # {X} -> X
interlinear_full_lines$line = gsub("y\\{\\&Y\\}", "Y", interlinear_full_lines$line) # y{Y} -> Y
interlinear_full_lines$line = gsub("s\\{\\&S\\}", "S", interlinear_full_lines$line) # s{S} -> S
interlinear_full_lines$line = gsub("\\{\\&E\\}", "E", interlinear_full_lines$line) # {E} -> E
interlinear_full_lines$line = gsub("k\\{\\&K\\}", "K", interlinear_full_lines$line) # k{K} -> K
interlinear_full_lines$line = gsub("t\\{\\&T\\}", "T", interlinear_full_lines$line) # t{T} -> T
interlinear_full_lines$line = gsub("f\\{\\&F\\}", "F", interlinear_full_lines$line) # f{F} -> F
interlinear_full_lines$line = gsub("o\\{\\&O\\}", "O", interlinear_full_lines$line) # o{O} -> O
interlinear_full_lines$line = gsub("r\\{\\&r\\}", "R", interlinear_full_lines$line) # r{r} -> R
interlinear_full_lines$line = gsub("o\\{\\&O\\'\\}", "O\\'", interlinear_full_lines$line) # o{O'} -> O'
interlinear_full_lines$line = gsub("i\\{\\&I\\}", "I", interlinear_full_lines$line) # i{I} -> I
interlinear_full_lines$line = gsub("\\{\\&I.*\\}", "I\\'", interlinear_full_lines$line) # {I''} -> I'
# Rare characters
interlinear_full_lines$line = gsub("\\*?\\{\\&138\\}", "è", interlinear_full_lines$line) # *{&138} -> è
interlinear_full_lines$line = gsub("\\*?\\{\\&140\\}", "î", interlinear_full_lines$line) # *{&140} ->î
interlinear_full_lines$line = gsub("\\*?\\{\\&144\\}", "É", interlinear_full_lines$line) # {&144} -> É
interlinear_full_lines$line = gsub("\\*?\\{\\&146\\}", "Æ", interlinear_full_lines$line) # {&146} -> Æ
interlinear_full_lines$line = gsub("\\*?\\{\\&152\\}", "ÿ", interlinear_full_lines$line) # {&152} -> ÿ
interlinear_full_lines$line = gsub("\\*?\\{\\&153\\}", "Ö", interlinear_full_lines$line) # {&153} -> Ö
interlinear_full_lines$line = gsub("\\*?\\{\\&163\\}", "ú", interlinear_full_lines$line) # {&163} -> ú
interlinear_full_lines$line = gsub("\\*?\\{\\&164\\}", "ñ", interlinear_full_lines$line) # {&164} -> ñ
interlinear_full_lines$line = gsub("\\*?\\{\\&167\\}", "º", interlinear_full_lines$line) # {&167} -> º
interlinear_full_lines$line = gsub("\\*?\\{\\&169\\}", "®", interlinear_full_lines$line) # {&169} -> ®
interlinear_full_lines$line = gsub("\\*?\\{\\&170\\}", "¬", interlinear_full_lines$line) # {&170} -> ¬
interlinear_full_lines$line = gsub("\\*?\\{\\&171\\}", "½", interlinear_full_lines$line) # {&171} -> ½
interlinear_full_lines$line = gsub("\\*?\\{\\&172\\}", "¼", interlinear_full_lines$line) # {&172} -> ¼
interlinear_full_lines$line = gsub("\\*?\\{\\&173\\}", "¡", interlinear_full_lines$line) # {&173} -> ¡
interlinear_full_lines$line = gsub("\\*?\\{\\&176\\}", "░", interlinear_full_lines$line) # {&176} -> ░
interlinear_full_lines$line = gsub("\\*?\\{\\&178\\}", "▓", interlinear_full_lines$line) # {&178} -> ▓
interlinear_full_lines$line = gsub("\\*?\\{\\&192\\}", "└", interlinear_full_lines$line) # {&192} -> └
interlinear_full_lines$line = gsub("\\*?\\{\\&195\\}", "├", interlinear_full_lines$line) # {&192} -> ├
interlinear_full_lines$line = gsub("\\*?\\{\\&252\\}", "³", interlinear_full_lines$line) # {&252} -> ³
interlinear_full_lines$line = gsub("\\*?\\{\\&253\\}", "²", interlinear_full_lines$line) # {&252} -> ²
interlinear_full_lines$line = gsub("\\{\\\\\\}", "", interlinear_full_lines$line) # {\\} -> '' (alignment)
interlinear_full_lines$line = gsub("\\*\\{\\&zh\\}", "zh", interlinear_full_lines$line) # *{&zh} -> zh
interlinear_full_lines$line = gsub("\\*\\{\\&ct\\}", "ct", interlinear_full_lines$line) # *{&ct} -> ct
interlinear_full_lines$line = gsub("\\*\\{\\&an\\}", "an", interlinear_full_lines$line) # *{&an} -> an
interlinear_full_lines$line = gsub("\\*\\{\\&ar\\}", "ar", interlinear_full_lines$line) # *{&ar} -> ar
interlinear_full_lines$line = gsub("\\{\\&c'\\}", "c'", interlinear_full_lines$line) # {&c'} -> c'
interlinear_full_lines$line = gsub("\\{\\&c'y\\}", "c'y", interlinear_full_lines$line) # {&c'y} -> c'y
interlinear_full_lines$line = gsub("\\{\\&c'a\\}", "c'a", interlinear_full_lines$line) # {&c'a} -> c'a
interlinear_full_lines$line = gsub("\\*\\{\\&ol\\}", "ol", interlinear_full_lines$line) # *{&ol} -> ol
interlinear_full_lines$line = gsub("\\*\\{\\&PP\\}", "PP", interlinear_full_lines$line) # *{&PP} -> PP
interlinear_full_lines$line = gsub("\\.\\.", '\\.', interlinear_full_lines$line)
# Delete spaces, extra breaks, change non-final dashes to periods
interlinear_full_lines$complex.line <- interlinear_full_lines$line
# IGNORE LIGATURES AND WEIRDOS
# Change the infrequent characters to *
interlinear_full_lines$line = gsub("[èîÉÆÿÖúñº®¬½¼¡░▓└├³²vzub]", '*', interlinear_full_lines$line)
# Plumes are also rare characters
interlinear_full_lines$line = gsub("[ '\"]", '*', interlinear_full_lines$line)
# Make all characters lowercase (delete ligatures)
interlinear_full_lines$line = tolower(interlinear_full_lines$line)
takahashi_lines <- interlinear_full_lines[interlinear_full_lines$transcriber == 'H',]
takahashi_lines$line <- gsub('[\\!\\% ]', '', takahashi_lines$line)
line_lengths <- c() # Length of each line of the Takahashi transcription
line_code <- c() # The numeric code of the line: '-' (line end), '-' (par end), '.' (circular text)
for (l in takahashi_lines$line) {
line_lengths <- c(line_lengths, length(unlist(strsplit(l, "[\\.,-]"))))
code <- str_extract(l, '.$') # Make the code the last character of the string, unless there's a '-' and then a '.'
if ((code == '.')&(grepl('-', l))) {
code <- '-'
}
line_code <- c(line_code, code)
#line_code <- c(line_code, str_extract(l, '([-=])|(\\.$)'))
}
# Types of lines: 'line, 'init', 'fin', 'init-fin' (single line pars), and 'circ' (circular text)
line_types <- c('init')
for (i in 2:length(takahashi_lines$line)) {
line_type <- NULL
# Circular Line Codes
if ((line_code[i] == '.')|(line_code[i] == '{blot}')) {
line_type <- 'circ'
}
# Paragraph-ending Line Codes
if (line_code[i] == '=') {
if (line_code[i-1] %in% c('.', '=')) {
line_type <- 'init-fin'
} else {
line_type <- 'fin'
}
}
# Regular Line Codes
if (line_code[i] == '-') {
if (line_code[i-1] %in% c('.', '=')) {
if (line_code[i+1] == '.') {
line_type <- 'init-fin'
} else {
line_type <- 'init'
}
} else {
if (line_code[i+1] == '.') {
line_type <- 'fin'
} else {
line_type <- 'line'
}
}
}
line_types <- c(line_types, line_type)
}
par_initial_nums <- c()
for (i in 1:length(line_types)) {
par_num <- NA
if (line_types[i] == 'circ') {
par_num <- NA
}
if (line_types[i] %in% c('init', 'init-fin')) {
par_num <- 0
}
if (line_types[i] %in% c('line', 'fin')) {
par_num <- line_lengths[i-1] + tail(par_initial_nums, 1)
}
par_initial_nums <- c(par_initial_nums, par_num)
}
# Paragraph final requires moving backwards through the list, so reverse everything
r_line_types <- rev(line_types)
r_line_lengths <- rev(line_lengths)
r_par_final_nums <- c()
for (i in 1:length(line_types)) {
par_num <- NA
if (r_line_types[i] == 'circ') {
par_num <- NA
}
if (r_line_types[i] %in% c('fin', 'init-fin')) {
par_num <- 0
}
if (r_line_types[i] %in% c('line', 'init')) {
par_num <- r_line_lengths[i-1] + tail(r_par_final_nums, 1)
}
r_par_final_nums <- c(r_par_final_nums, par_num)
}
par_final_nums <- rev(r_par_final_nums)
# Add the paragraph information into the interlinear line dataframe (but only for the Takahashi transcription)
# Fill out the cols with NAs
interlinear_full_lines$par_init <- rep(NA, length(interlinear_full_lines$line))
interlinear_full_lines$par_fin <- rep(NA, length(interlinear_full_lines$line))
# Add the info into the Takahashi lines
interlinear_full_lines$par_init[interlinear_full_lines$transcriber == 'H'] <- par_initial_nums
interlinear_full_lines$par_fin[interlinear_full_lines$transcriber == 'H'] <- par_final_nums
# Write the file
write.table(interlinear_full_lines, file = "Voynich_texts/interlinear_full_lines.txt", sep = "\t", row.names=FALSE)
word_by_word <- c()
complex.word_by_word <- c()
folio_by_word <- c()
section_by_word <- c()
quire_by_word <- c()
panel_by_word <- c()
language_by_word <- c()
hand_by_word <- c()
misc_by_word <- c()
d.hand_by_word <- c()
place_by_word <- c()
linenum_by_word <- c()
transcriber_by_word <- c()
line.init <- c() # Placement from the first word in the line
line.fin <- c() # Placement from the last word in the line
par.init <- c() # Placement from the first word in the paragraph
par.fin <- c() # # Placement from the last word in the line
print ("Lines read:")
for (i in 1:length(interlinear_full_lines$line)) {
line <- interlinear_full_lines[i,1]
complex.line <- interlinear_full_lines[i,13]
line <- gsub('[=\\!\\%]', '', line) # Remove Filler and paragraph boundary characters
line <- gsub('\\-$', '', line) # Remove dashes at the end of words (line boundary characters)
line <- gsub('-', '\\.', line) # Elsewhere they are treated as word boundaries (as between labels)
complex.line <- gsub('[=\\!\\%]', '', complex.line) # Remove Filler and paragraph boundar characters
complex.line <- gsub('\\-$', '', complex.line) # Remove dashes at the end of words (line boundary characters)
complex.line <- gsub('-', '\\.', complex.line) # Elsewhere they are treated as word boundaries (as between labels)
line_list <- unlist(strsplit(line, '[\\.,-]'))
complex.line_list <- unlist(strsplit(complex.line, '[\\.,-]'))
line_len <- length(line_list)
if (i%%1000 == 0) {
print(i)
}
if (line_len > 0) {
for (j in 1:line_len) {
word_by_word <- c(word_by_word, line_list[j])
complex.word_by_word <- c(complex.word_by_word, complex.line_list[j])
folio_by_word <- c(folio_by_word, folio_by_line[i])
section_by_word <- c(section_by_word, section_by_line[i])
quire_by_word <- c(quire_by_word, quire_by_line[i])
panel_by_word <- c(panel_by_word, panel_by_line[i])
language_by_word <- c(language_by_word, language_by_line[i])
hand_by_word <- c(hand_by_word, hand_by_line[i])
misc_by_word <- c(misc_by_word, misc_by_line[i])
d.hand_by_word <- c(d.hand_by_word, d.hand_by_line[i])
place_by_word <- c(place_by_word, place_by_line[i])
linenum_by_word <- c(linenum_by_word, linenum_by_line[i])
transcriber_by_word <- c(transcriber_by_word, transcriber_by_line[i])
# Line placement
line.init <- c(line.init, j)
line.fin <- c(line.fin, line_len - j + 1)
# Paragraph placement
if (is.na(interlinear_full_lines$par_init[i])) {
par.init <- c(par.init, NA)
} else {
par.init <- c(par.init, (as.numeric(interlinear_full_lines$par_init[i]) + j) )
}
if (is.na(interlinear_full_lines$par_fin[i])) {
par.fin <- c(par.fin, NA)
} else {
par.fin <- c(par.fin, (as.numeric(interlinear_full_lines$par_fin[i]) + line_len - j + 1) )
}
}
}
}
interlinear_full_words <- data.frame(word_by_word, complex.word_by_word, folio_by_word, section_by_word, quire_by_word, panel_by_word, language_by_word, hand_by_word, misc_by_word, d.hand_by_word, place_by_word, linenum_by_word, transcriber_by_word, line.init, line.fin, par.init, par.fin, stringsAsFactors = FALSE)
names(interlinear_full_words) <- c('word', 'complex_word', 'folio', 'section', 'quire', 'panel', 'language', 'hand', 'misc', 'd.hand', 'placement', 'line_number', 'transcriber', 'line_initial', 'line_final', 'par_initial', 'par_final')
# Write the file
write.table(interlinear_full_words, file = "Voynich_texts/interlinear_full_words.txt", sep = "\t", row.names=FALSE)
interlinear_full_words[interlinear_full_words$word != interlinear_full_words$complex_word,]
